<div id="raycast-canvas" width="640" height="400"></div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/p5.min.js"></script>
<script>
  class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}
//TODO: refactor to use Point class
let player = { x: 4.5, y: 4.5, angle: 0 };
let walls = [];
function setup() {
  let canvas = createCanvas(640, 400);
  canvas.parent("raycast-canvas"); // attach to canvas tag
  noStroke();
  walls = [
    {start: new.Point(1,1,), end:new.Point(8,1) }, // top wall
    {start: new.Point(8, 1), end: new.Point(8,8)}, // right wall
    {start: new.Point(8,8), end: new.Point(1,8)}, // bottom wall
    {start: new.Point(1, 8), end: new.Point(1,1)},  // left wall
  ];
  }

function drawMap2D() {
  push();
  scale(10); // zoom in
  stroke(255);
  for (let wall of walls) {
    line(wall.x1, wall.y1, wall.x2, wall.y2);
  }
  fill('red');
  ellipse(player.x, player.y, 0.1);

  // draw rays
  stroke(0, 255, 0, 100);
  for (let i = 0; i < width; i += 20) { // thinner density for debugging
    let rayAngle = player.angle - PI / 2 / 2 + (i / width) * PI / 2;
    let dist = castRay(rayAngle);
    let hitX = player.x + cos(rayAngle) * dist;
    let hitY = player.y + sin(rayAngle) * dist;
    line(player.x, player.y, hitX, hitY);
  }
  pop();
}

  
function draw() {
  background(0);
  const fov = PI / 2; //currently 90 degrees divide by 3 for 60 degrees

  for (let i = 0; i < width; i++) {
    let rayAngle = player.angle - fov / 2 + (i / width) * fov;
    let dist = castRay(rayAngle);
    let correctedDist = dist * cos(rayAngle - player.angle);
    let wallHeight = height / (correctedDist + 0.5);
    let brightness = max(20, 255 - correctedDist * 30);
    fill(brightness);
    rect(i, height / 2 - wallHeight / 2, 1, wallHeight);
  }
  drawMap2D();
  player.angle += 0.01;
}

function castRay(angle) {
  let rayDir = { x: cos(angle), y: sin(angle) };
  let origin = { x: player.x, y: player.y };
  let closest = null;

  for (let wall of walls) {
    let hit = rayIntersectsWall(origin, rayDir, wall);
        if (hit) {
      // Uncomment this line to print wall hits
          console.log(`Hit wall (${wall.start.x},${wall.start.y})â€“(${wall.end.x},${wall.end.y}) at distance ${hit.distance}`);
    }
    if (hit && (!closest || hit.distance < closest.distance)) {
      closest = hit;
    }
  }

  return closest ? closest.distance : 1000;
}

// function rayIntersectsWall(rayOrigin, rayDir, wall) {
//   const { x1, y1, x2, y2 } = wall;
//   const dx = x2 - x1;
//   const dy = y2 - y1;
//   const denom = rayDir.x * dy - rayDir.y * dx;
//
//   if (abs(denom) < 0.00001) return null; // parallel
//
//   const t = ((rayOrigin.x - x1) * dy - (rayOrigin.y - y1) * dx) / denom;
//   const u = ((rayOrigin.x - x1) * rayDir.y - (rayOrigin.y - y1) * rayDir.x) / denom;
//
//   if (t < 0 || u < 0 || u > 1) return null;
//
//   return {
//     x: rayOrigin.x + rayDir.x * t,
//     y: rayOrigin.y + rayDir.y * t,
//     distance: t
//   };
//
  function rayIntersectsWall(rayOrigin, rayDir, wall) {
    const { start, end } = wall;

  const x3 = rayOrigin.x;
  const y3 = rayOrigin.y;
  const x4 = rayOrigin.x + rayDir.x;
  const y4 = rayOrigin.y + rayDir.y;

    const denom = (start.x - end.x) * (y3 - y4) - (start.y - end.y) * (x3 - x4);
  if (abs(denom) < 0.00001) return null; // parallel or identical

  const t = ((start.x - x3) * (y3 - y4) - (start.y - y3) * (x3 - x4)) / denom;
    const u = -((start.x - end.x) * (y1 - y3) - (start.y - end.y) * (start.x - x3)) / denom;

  if (t < 0 || t > 1 || u < 0) return null;

    const intersectionX = start.x + t * (end.x - start.x);
    const intersectionY = start.y + t * (end.y - start.y);
    const distance = dist(x3, y3, intersectionX, intersectionY); //TODO: look up dist function

  return { x: intersectionX, y: intersectionY, distance };
}
</script>
